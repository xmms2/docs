var search_data = {"index":{"searchIndex":["xmms","broadcastresult","client","async","clienterror","disconnectederror","sync","collection","async","attributes","clienterror","collectionerror","disconnectederror","operands","patternerror","sync","dict","playlist","async","clienterror","disconnectederror","playlisterror","sync","rawdict","result","resulterror","valueerror","signalresult","unknown","&()","<<()","[]()","[]()","[]=()","add_collection()","add_entry()","and()","attributes()","bindata_add()","bindata_list()","bindata_remove()","bindata_retrieve()","broadcast_coll_changed()","broadcast_config_value_changed()","broadcast_mediainfo_reader_status()","broadcast_medialib_entry_added()","broadcast_medialib_entry_changed()","broadcast_medialib_entry_removed()","broadcast_medialib_entry_updated()","broadcast_playback_current_id()","broadcast_playback_status()","broadcast_playback_volume_changed()","broadcast_playlist_changed()","broadcast_playlist_current_pos()","broadcast_playlist_loaded()","broadcast_quit()","clear()","coll_find()","coll_get()","coll_idlist_from_playlist_file()","coll_list()","coll_query()","coll_query_ids()","coll_query_info()","coll_remove()","coll_rename()","coll_save()","complement()","config_get_value()","config_list_values()","config_register_value()","config_set_value()","connect()","current_pos()","decode_url()","delete()","delete()","delete!()","disconnect()","disconnect()","each()","each()","each()","each_key()","each_key()","each_pair()","each_pair()","each_value()","each_value()","empty?()","entries()","error()","error?()","has_key?()","has_key?()","idlist()","idlist=()","include?()","include?()","insert_entry()","inspect()","inspect()","intersect()","io_disconnect()","io_fd()","io_in_handle()","io_on_need_out()","io_out_handle()","io_want_out()","key?()","key?()","last_error()","length()","load()","main_stats()","medialib_add_entry()","medialib_entry_move()","medialib_entry_property_remove()","medialib_entry_property_set()","medialib_entry_remove()","medialib_get_id()","medialib_get_info()","medialib_path_import()","medialib_path_import_encoded()","medialib_rehash()","member?()","member?()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","method_missing()","move_entry()","name()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","not()","notifier()","on_disconnect()","operands()","or()","parse()","playback_current_id()","playback_pause()","playback_playtime()","playback_seek_ms()","playback_seek_ms_rel()","playback_seek_samples()","playback_seek_samples_rel()","playback_start()","playback_status()","playback_stop()","playback_tickle()","playback_volume_get()","playback_volume_set()","playlist()","playlist_current_active()","playlist_list()","playlist_set_next()","playlist_set_next_rel()","plugin_list()","push()","quit()","radd()","remove()","remove_entry()","rinsert()","shuffle()","signal_mediainfo_reader_unindexed()","signal_playback_playtime()","size()","sort()","to_propdict()","type()","union()","universe()","userconfdir()","value()","wait()","xform_media_browse()","|()","~()"],"longSearchIndex":["xmms","xmms::broadcastresult","xmms::client","xmms::client::async","xmms::client::clienterror","xmms::client::disconnectederror","xmms::client::sync","xmms::collection","xmms::collection::async","xmms::collection::attributes","xmms::collection::clienterror","xmms::collection::collectionerror","xmms::collection::disconnectederror","xmms::collection::operands","xmms::collection::patternerror","xmms::collection::sync","xmms::dict","xmms::playlist","xmms::playlist::async","xmms::playlist::clienterror","xmms::playlist::disconnectederror","xmms::playlist::playlisterror","xmms::playlist::sync","xmms::rawdict","xmms::result","xmms::result::resulterror","xmms::result::valueerror","xmms::signalresult","unknown","xmms::collection#&()","xmms::collection::operands#<<()","xmms::collection::attributes#[]()","xmms::dict#[]()","xmms::collection::attributes#[]=()","xmms::playlist#add_collection()","xmms::playlist#add_entry()","xmms::collection#and()","xmms::collection#attributes()","xmms::client#bindata_add()","xmms::client#bindata_list()","xmms::client#bindata_remove()","xmms::client#bindata_retrieve()","xmms::client#broadcast_coll_changed()","xmms::client#broadcast_config_value_changed()","xmms::client#broadcast_mediainfo_reader_status()","xmms::client#broadcast_medialib_entry_added()","xmms::client#broadcast_medialib_entry_changed()","xmms::client#broadcast_medialib_entry_removed()","xmms::client#broadcast_medialib_entry_updated()","xmms::client#broadcast_playback_current_id()","xmms::client#broadcast_playback_status()","xmms::client#broadcast_playback_volume_changed()","xmms::client#broadcast_playlist_changed()","xmms::client#broadcast_playlist_current_pos()","xmms::client#broadcast_playlist_loaded()","xmms::client#broadcast_quit()","xmms::playlist#clear()","xmms::client#coll_find()","xmms::client#coll_get()","xmms::client#coll_idlist_from_playlist_file()","xmms::client#coll_list()","xmms::client#coll_query()","xmms::client#coll_query_ids()","xmms::client#coll_query_info()","xmms::client#coll_remove()","xmms::client#coll_rename()","xmms::client#coll_save()","xmms::collection#complement()","xmms::client#config_get_value()","xmms::client#config_list_values()","xmms::client#config_register_value()","xmms::client#config_set_value()","xmms::client#connect()","xmms::playlist#current_pos()","xmms::decode_url()","xmms::collection::attributes#delete()","xmms::collection::operands#delete()","xmms::client#delete!()","xmms::broadcastresult#disconnect()","xmms::signalresult#disconnect()","xmms::collection::attributes#each()","xmms::collection::operands#each()","xmms::dict#each()","xmms::collection::attributes#each_key()","xmms::dict#each_key()","xmms::collection::attributes#each_pair()","xmms::dict#each_pair()","xmms::collection::attributes#each_value()","xmms::dict#each_value()","xmms::dict#empty?()","xmms::playlist#entries()","xmms::result#error()","xmms::result#error?()","xmms::collection::attributes#has_key?()","xmms::dict#has_key?()","xmms::collection#idlist()","xmms::collection#idlist=()","xmms::collection::attributes#include?()","xmms::dict#include?()","xmms::playlist#insert_entry()","xmms::collection::attributes#inspect()","xmms::dict#inspect()","xmms::collection#intersect()","xmms::client#io_disconnect()","xmms::client#io_fd()","xmms::client#io_in_handle()","xmms::client#io_on_need_out()","xmms::client#io_out_handle()","xmms::client#io_want_out()","xmms::collection::attributes#key?()","xmms::dict#key?()","xmms::client#last_error()","xmms::dict#length()","xmms::playlist#load()","xmms::client#main_stats()","xmms::client#medialib_add_entry()","xmms::client#medialib_entry_move()","xmms::client#medialib_entry_property_remove()","xmms::client#medialib_entry_property_set()","xmms::client#medialib_entry_remove()","xmms::client#medialib_get_id()","xmms::client#medialib_get_info()","xmms::client#medialib_path_import()","xmms::client#medialib_path_import_encoded()","xmms::client#medialib_rehash()","xmms::collection::attributes#member?()","xmms::dict#member?()","xmms::client::async#method_missing()","xmms::client::sync#method_missing()","xmms::collection::async#method_missing()","xmms::collection::sync#method_missing()","xmms::playlist::async#method_missing()","xmms::playlist::sync#method_missing()","xmms::playlist#move_entry()","xmms::playlist#name()","xmms::client::new()","xmms::client::async::new()","xmms::client::sync::new()","xmms::collection::new()","xmms::collection::async::new()","xmms::collection::attributes::new()","xmms::collection::operands::new()","xmms::collection::sync::new()","xmms::playlist::new()","xmms::playlist::async::new()","xmms::playlist::sync::new()","xmms::collection#not()","xmms::result#notifier()","xmms::client#on_disconnect()","xmms::collection#operands()","xmms::collection#or()","xmms::collection::parse()","xmms::client#playback_current_id()","xmms::client#playback_pause()","xmms::client#playback_playtime()","xmms::client#playback_seek_ms()","xmms::client#playback_seek_ms_rel()","xmms::client#playback_seek_samples()","xmms::client#playback_seek_samples_rel()","xmms::client#playback_start()","xmms::client#playback_status()","xmms::client#playback_stop()","xmms::client#playback_tickle()","xmms::client#playback_volume_get()","xmms::client#playback_volume_set()","xmms::client#playlist()","xmms::client#playlist_current_active()","xmms::client#playlist_list()","xmms::client#playlist_set_next()","xmms::client#playlist_set_next_rel()","xmms::client#plugin_list()","xmms::collection::operands#push()","xmms::client#quit()","xmms::playlist#radd()","xmms::playlist#remove()","xmms::playlist#remove_entry()","xmms::playlist#rinsert()","xmms::playlist#shuffle()","xmms::client#signal_mediainfo_reader_unindexed()","xmms::client#signal_playback_playtime()","xmms::dict#size()","xmms::playlist#sort()","xmms::rawdict#to_propdict()","xmms::collection#type()","xmms::collection#union()","xmms::collection::universe()","xmms::userconfdir()","xmms::result#value()","xmms::result#wait()","xmms::client#xform_media_browse()","xmms::collection#|()","xmms::collection#~()"],"info":[["Xmms","","Xmms.html","",""],["Xmms::BroadcastResult","","Xmms/BroadcastResult.html","",""],["Xmms::Client","","Xmms/Client.html","",""],["Xmms::Client::Async","","Xmms/Client/Async.html","",""],["Xmms::Client::ClientError","","Xmms/Client/ClientError.html","",""],["Xmms::Client::DisconnectedError","","Xmms/Client/DisconnectedError.html","",""],["Xmms::Client::Sync","","Xmms/Client/Sync.html","",""],["Xmms::Collection","","Xmms/Collection.html","",""],["Xmms::Collection::Async","","Xmms/Collection/Async.html","",""],["Xmms::Collection::Attributes","","Xmms/Collection/Attributes.html","",""],["Xmms::Collection::ClientError","","Xmms/Collection/ClientError.html","",""],["Xmms::Collection::CollectionError","","Xmms/Collection/CollectionError.html","",""],["Xmms::Collection::DisconnectedError","","Xmms/Collection/DisconnectedError.html","",""],["Xmms::Collection::Operands","","Xmms/Collection/Operands.html","",""],["Xmms::Collection::PatternError","","Xmms/Collection/PatternError.html","",""],["Xmms::Collection::Sync","","Xmms/Collection/Sync.html","",""],["Xmms::Dict","","Xmms/Dict.html","",""],["Xmms::Playlist","","Xmms/Playlist.html","",""],["Xmms::Playlist::Async","","Xmms/Playlist/Async.html","",""],["Xmms::Playlist::ClientError","","Xmms/Playlist/ClientError.html","",""],["Xmms::Playlist::DisconnectedError","","Xmms/Playlist/DisconnectedError.html","",""],["Xmms::Playlist::PlaylistError","","Xmms/Playlist/PlaylistError.html","",""],["Xmms::Playlist::Sync","","Xmms/Playlist/Sync.html","",""],["Xmms::RawDict","","Xmms/RawDict.html","",""],["Xmms::Result","","Xmms/Result.html","",""],["Xmms::Result::ResultError","","Xmms/Result/ResultError.html","",""],["Xmms::Result::ValueError","","Xmms/Result/ValueError.html","",""],["Xmms::SignalResult","","Xmms/SignalResult.html","",""],["unknown","","unknown.html","",""],["&","Xmms::Collection","Xmms/Collection.html#method-i-26","(other)",""],["<<","Xmms::Collection::Operands","Xmms/Collection/Operands.html#method-i-3C-3C","(p1)",""],["[]","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-5B-5D","(p1)","<p>HAVE_RB_PROTECT_INSPECT\n"],["[]","Xmms::Dict","Xmms/Dict.html#method-i-5B-5D","(p1)",""],["[]=","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-5B-5D-3D","(p1, p2)",""],["add_collection","Xmms::Playlist","Xmms/Playlist.html#method-i-add_collection","(*args)","<p>Adds the collection <em>coll</em> to the playlist.\n"],["add_entry","Xmms::Playlist","Xmms/Playlist.html#method-i-add_entry","(p1)","<p>Adds an entry to the playlist. <em>arg</em> can be either a URL or an id.\n"],["and","Xmms::Collection","Xmms/Collection.html#method-i-and","(other)",""],["attributes","Xmms::Collection","Xmms/Collection.html#method-i-attributes","()","<p>Returns the attributes of the collection.\n"],["bindata_add","Xmms::Client","Xmms/Client.html#method-i-bindata_add","(p1)","<p>Stores binary data on the server.\n"],["bindata_list","Xmms::Client","Xmms/Client.html#method-i-bindata_list","()","<p>List all bindata hashes stored on the server.\n"],["bindata_remove","Xmms::Client","Xmms/Client.html#method-i-bindata_remove","(p1)","<p>Remove a datafile from the server.\n"],["bindata_retrieve","Xmms::Client","Xmms/Client.html#method-i-bindata_retrieve","(p1)","<p>Retrieves the bindata entry specified by hash (hex string) from the server.\n"],["broadcast_coll_changed","Xmms::Client","Xmms/Client.html#method-i-broadcast_coll_changed","()","<p>The collection_changed broadcast, if requested, is called anytime a\ncollection is altered.\n"],["broadcast_config_value_changed","Xmms::Client","Xmms/Client.html#method-i-broadcast_config_value_changed","()","<p>Retrieves configuration properties as a broadcast.\n"],["broadcast_mediainfo_reader_status","Xmms::Client","Xmms/Client.html#method-i-broadcast_mediainfo_reader_status","()","<p>Requests the status of the mediainfo reader.\n"],["broadcast_medialib_entry_added","Xmms::Client","Xmms/Client.html#method-i-broadcast_medialib_entry_added","()","<p>Retrieves the id of an added medialib entry as a broadcast.\n"],["broadcast_medialib_entry_changed","Xmms::Client","Xmms/Client.html#method-i-broadcast_medialib_entry_changed","()","<p>Retrieves the id of a changed medialib entry as a broadcast.\n"],["broadcast_medialib_entry_removed","Xmms::Client","Xmms/Client.html#method-i-broadcast_medialib_entry_removed","()","<p>Retrieves the id of an removed medialib entry as a broadcast.\n"],["broadcast_medialib_entry_updated","Xmms::Client","Xmms/Client.html#method-i-broadcast_medialib_entry_updated","()","<p>Retrieves the id of a changed medialib entry as a broadcast.\n"],["broadcast_playback_current_id","Xmms::Client","Xmms/Client.html#method-i-broadcast_playback_current_id","()","<p>Retrieves the media id of the currently played track as a broadcast.\n"],["broadcast_playback_status","Xmms::Client","Xmms/Client.html#method-i-broadcast_playback_status","()","<p>Retrieves the playback status as a broadcast.\n"],["broadcast_playback_volume_changed","Xmms::Client","Xmms/Client.html#method-i-broadcast_playback_volume_changed","()","<p>Registers a broadcast handler that’s evoked when the playback volume\nchanges.\n"],["broadcast_playlist_changed","Xmms::Client","Xmms/Client.html#method-i-broadcast_playlist_changed","()","<p>Retrieves a hash describing the change to the playlist as a broadcast.\n"],["broadcast_playlist_current_pos","Xmms::Client","Xmms/Client.html#method-i-broadcast_playlist_current_pos","()","<p>Retrieves the current playlist position as a broadcast. See\n<em>playlist_current_pos</em>.\n"],["broadcast_playlist_loaded","Xmms::Client","Xmms/Client.html#method-i-broadcast_playlist_loaded","()","<p>Will be called when a playlist has been loaded.\n"],["broadcast_quit","Xmms::Client","Xmms/Client.html#method-i-broadcast_quit","()","<p>Will be called when the server is terminating.\n"],["clear","Xmms::Playlist","Xmms/Playlist.html#method-i-clear","()","<p>Clears the playlist.\n"],["coll_find","Xmms::Client","Xmms/Client.html#method-i-coll_find","(p1, p2)","<p>Find all collections in the given namespace <em>ns</em> which contain\n<em>id</em>.\n"],["coll_get","Xmms::Client","Xmms/Client.html#method-i-coll_get","(*args)","<p>Returns a result containing an Xmms::Collection object referencing the\ncollection named <em>name</em>. The namespace …\n"],["coll_idlist_from_playlist_file","Xmms::Client","Xmms/Client.html#method-i-coll_idlist_from_playlist_file","(p1)","<p>Returns a collection of the idlist type from the playlist file at\n<em>path</em>. <em>path</em> must be an unencoded string. …\n"],["coll_list","Xmms::Client","Xmms/Client.html#method-i-coll_list","(*args)","<p>Retrieves an array of the names of all the collections stored in the\nmedialib under the namespace <em>ns</em> …\n"],["coll_query","Xmms::Client","Xmms/Client.html#method-i-coll_query","(*args)",""],["coll_query_ids","Xmms::Client","Xmms/Client.html#method-i-coll_query_ids","(*args)","<p>Retrieves a list of all the ids of media matched by the collection.\n<em>order</em> specifies a list of properties …\n"],["coll_query_info","Xmms::Client","Xmms/Client.html#method-i-coll_query_info","(*args)","<p>Retrieves media info of media matched by the collection. <em>fetch</em>\nshould contain an array of properties …\n"],["coll_remove","Xmms::Client","Xmms/Client.html#method-i-coll_remove","(*args)","<p>Remove the collection named <em>name</em> from the media library. The\ncollection is removed from the namespace …\n"],["coll_rename","Xmms::Client","Xmms/Client.html#method-i-coll_rename","(*args)","<p>Rename the saved collection from <em>old</em> to <em>new</em> within the\nnamespace <em>ns</em> or all namespaces.\n"],["coll_save","Xmms::Client","Xmms/Client.html#method-i-coll_save","(p1, p2, p3)","<p>Save the collection <em>coll</em> named <em>name</em> under the namespace\n<em>ns</em> to the media library.\n"],["complement","Xmms::Collection","Xmms/Collection.html#method-i-complement","()","<p>Returns a new collection that is the logical complement of <em>c</em>.\n"],["config_get_value","Xmms::Client","Xmms/Client.html#method-i-config_get_value","(p1)","<p>Retrieves the value of the configuration property at <em>key</em>.\n"],["config_list_values","Xmms::Client","Xmms/Client.html#method-i-config_list_values","()","<p>Retrieves a list of all config values.\n"],["config_register_value","Xmms::Client","Xmms/Client.html#method-i-config_register_value","(p1, p2)","<p>Registers a configuration property at <em>key</em> with the given default\nvalue.\n"],["config_set_value","Xmms::Client","Xmms/Client.html#method-i-config_set_value","(p1, p2)","<p>Sets the value of the configuration property at <em>key</em> to\n<em>value</em>.\n"],["connect","Xmms::Client","Xmms/Client.html#method-i-connect","(*args)","<p>Connects <em>xc</em> to the XMMS2 daemon listening at <em>path</em>. If\n<em>path</em> isn’t given, the default path is used.\n"],["current_pos","Xmms::Playlist","Xmms/Playlist.html#method-i-current_pos","()","<p>Retrieves the current position of the playlist. May raise an\nXmms::Result::ValueError exception if the …\n"],["decode_url","Xmms","Xmms.html#method-c-decode_url","(p1)","<p>Decodes a url-encoded string <em>url</em> and returns it in UNKNOWN\nENCODING. Use with caution.\n"],["delete","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-delete","(p1)",""],["delete","Xmms::Collection::Operands","Xmms/Collection/Operands.html#method-i-delete","(p1)",""],["delete!","Xmms::Client","Xmms/Client.html#method-i-delete-21","()",""],["disconnect","Xmms::BroadcastResult","Xmms/BroadcastResult.html#method-i-disconnect","()",""],["disconnect","Xmms::SignalResult","Xmms/SignalResult.html#method-i-disconnect","()",""],["each","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-each","()",""],["each","Xmms::Collection::Operands","Xmms/Collection/Operands.html#method-i-each","()",""],["each","Xmms::Dict","Xmms/Dict.html#method-i-each","()",""],["each_key","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-each_key","()",""],["each_key","Xmms::Dict","Xmms/Dict.html#method-i-each_key","()",""],["each_pair","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-each_pair","()",""],["each_pair","Xmms::Dict","Xmms/Dict.html#method-i-each_pair","()",""],["each_value","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-each_value","()",""],["each_value","Xmms::Dict","Xmms/Dict.html#method-i-each_value","()",""],["empty?","Xmms::Dict","Xmms/Dict.html#method-i-empty-3F","()",""],["entries","Xmms::Playlist","Xmms/Playlist.html#method-i-entries","()","<p>Retrieves an array containing ids for each position of the playlist.\n"],["error","Xmms::Result","Xmms/Result.html#method-i-error","()",""],["error?","Xmms::Result","Xmms/Result.html#method-i-error-3F","()",""],["has_key?","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-has_key-3F","(p1)",""],["has_key?","Xmms::Dict","Xmms/Dict.html#method-i-has_key-3F","(p1)",""],["idlist","Xmms::Collection","Xmms/Collection.html#method-i-idlist","()","<p>Gets the list of media ids that make up the collection.\n"],["idlist=","Xmms::Collection","Xmms/Collection.html#method-i-idlist-3D","(p1)","<p>Sets the list of media ids that make up the collection.\n"],["include?","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-include-3F","(p1)",""],["include?","Xmms::Dict","Xmms/Dict.html#method-i-include-3F","(p1)",""],["insert_entry","Xmms::Playlist","Xmms/Playlist.html#method-i-insert_entry","(p1, p2)","<p>Inserts an entry to the current playlist at position <em>pos</em> in the\nplaylist. <em>arg</em> can be either a URL or …\n"],["inspect","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-inspect","()",""],["inspect","Xmms::Dict","Xmms/Dict.html#method-i-inspect","()",""],["intersect","Xmms::Collection","Xmms/Collection.html#method-i-intersect","(other)","<p>Returns a new collection that is the logical AND of <em>c</em> and\n<em>other</em>.\n"],["io_disconnect","Xmms::Client","Xmms/Client.html#method-i-io_disconnect","()","<p>Disconnects the IPC socket. This should only be used by event loop\nimplementations.\n"],["io_fd","Xmms::Client","Xmms/Client.html#method-i-io_fd","()","<p>Returns the file descriptor of the Xmms::Client IPC socket.\n"],["io_in_handle","Xmms::Client","Xmms/Client.html#method-i-io_in_handle","()","<p>Retrieves one incoming (from server) clientlib command if there are any in\nthe buffer.\n"],["io_on_need_out","Xmms::Client","Xmms/Client.html#method-i-io_on_need_out","()","<p>Sets the block that’s called when the output socket state changes.\n"],["io_out_handle","Xmms::Client","Xmms/Client.html#method-i-io_out_handle","()","<p>Sends one outgoing (to server) clientlib command. You should check\n#io_want_out before calling this method. …\n"],["io_want_out","Xmms::Client","Xmms/Client.html#method-i-io_want_out","()","<p>Returns <code>true</code> if an outgoing (to server) clientlib command is\npending, <code>false</code> otherwise.\n"],["key?","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-key-3F","(p1)",""],["key?","Xmms::Dict","Xmms/Dict.html#method-i-key-3F","(p1)",""],["last_error","Xmms::Client","Xmms/Client.html#method-i-last_error","()","<p>Returns the last error that occured in <em>xc</em> or <code>nil</code>, if\nno error occured yet.\n"],["length","Xmms::Dict","Xmms/Dict.html#method-i-length","()",""],["load","Xmms::Playlist","Xmms/Playlist.html#method-i-load","()","<p>Loads the playlist as the current active playlist.\n"],["main_stats","Xmms::Client","Xmms/Client.html#method-i-main_stats","()","<p>Retrieves a hash containing statistics about the daemon.\n"],["medialib_add_entry","Xmms::Client","Xmms/Client.html#method-i-medialib_add_entry","(p1)","<p>Adds <em>url</em> to the medialib.\n"],["medialib_entry_move","Xmms::Client","Xmms/Client.html#method-i-medialib_entry_move","(p1, p2)","<p>Moves the entry specified by <em>id</em> to a new URL without changing\nmediainfo.\n"],["medialib_entry_property_remove","Xmms::Client","Xmms/Client.html#method-i-medialib_entry_property_remove","(*args)","<p>Remove a custom field in the medialib associated with the entry\n<em>id</em>. <em>source</em> is an optional argument that …\n"],["medialib_entry_property_set","Xmms::Client","Xmms/Client.html#method-i-medialib_entry_property_set","(*args)","<p>Write info to the medialib at <em>id</em>. <em>source</em> is an optional\nargument that describes where to write the mediainfo. …\n"],["medialib_entry_remove","Xmms::Client","Xmms/Client.html#method-i-medialib_entry_remove","(p1)","<p>Removes the entry specified by <em>id</em> from the medialib.\n"],["medialib_get_id","Xmms::Client","Xmms/Client.html#method-i-medialib_get_id","(p1)","<p>Retrieves the id corresponding to <em>url</em>.\n"],["medialib_get_info","Xmms::Client","Xmms/Client.html#method-i-medialib_get_info","(p1)","<p>Retrieves medialib info for <em>id</em>.\n"],["medialib_path_import","Xmms::Client","Xmms/Client.html#method-i-medialib_path_import","(p1)","<p>Recursively imports all media files under <em>path</em> to the medialib.\n"],["medialib_path_import_encoded","Xmms::Client","Xmms/Client.html#method-i-medialib_path_import_encoded","(p1)","<p>Recursively imports all media files under the url encoded <em>path</em> to\nthe medialib.\n"],["medialib_rehash","Xmms::Client","Xmms/Client.html#method-i-medialib_rehash","(p1)","<p>Rehashes the medialib entry at <em>id</em> or the whole medialib if\n<em>id</em> == 0.\n"],["member?","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-i-member-3F","(p1)",""],["member?","Xmms::Dict","Xmms/Dict.html#method-i-member-3F","(p1)",""],["method_missing","Xmms::Client::Async","Xmms/Client/Async.html#method-i-method_missing","(id, *args, &block)",""],["method_missing","Xmms::Client::Sync","Xmms/Client/Sync.html#method-i-method_missing","(id, *args)",""],["method_missing","Xmms::Collection::Async","Xmms/Collection/Async.html#method-i-method_missing","(id, *args, &block)",""],["method_missing","Xmms::Collection::Sync","Xmms/Collection/Sync.html#method-i-method_missing","(id, *args)",""],["method_missing","Xmms::Playlist::Async","Xmms/Playlist/Async.html#method-i-method_missing","(id, *args, &block)",""],["method_missing","Xmms::Playlist::Sync","Xmms/Playlist/Sync.html#method-i-method_missing","(id, *args)",""],["move_entry","Xmms::Playlist","Xmms/Playlist.html#method-i-move_entry","(p1, p2)","<p>Moves the entry at <em>current_pos</em> to <em>new_pos</em> in the\nplaylist.\n"],["name","Xmms::Playlist","Xmms/Playlist.html#method-i-name","()","<p>Returns the name of the playlist in the medialib as a String.\n"],["new","Xmms::Client","Xmms/Client.html#method-c-new","(p1)","<p>Creates an Xmms::Client object.\n"],["new","Xmms::Client::Async","Xmms/Client/Async.html#method-c-new","(name)",""],["new","Xmms::Client::Sync","Xmms/Client/Sync.html#method-c-new","(name)",""],["new","Xmms::Collection","Xmms/Collection.html#method-c-new","(p1)","<p>Returns a new Xmms::Collection object of type <em>type</em>.\n"],["new","Xmms::Collection::Async","Xmms/Collection/Async.html#method-c-new","(coll)",""],["new","Xmms::Collection::Attributes","Xmms/Collection/Attributes.html#method-c-new","(p1)",""],["new","Xmms::Collection::Operands","Xmms/Collection/Operands.html#method-c-new","(p1)",""],["new","Xmms::Collection::Sync","Xmms/Collection/Sync.html#method-c-new","(coll)",""],["new","Xmms::Playlist","Xmms/Playlist.html#method-c-new","(*args)","<p>Initializes a new Xmms::Playlist using the playlist named <em>name</em> and\nthe Xmms::Client instance <em>xc</em>. Xmms::Client#playlist(name) …\n"],["new","Xmms::Playlist::Async","Xmms/Playlist/Async.html#method-c-new","(plist)",""],["new","Xmms::Playlist::Sync","Xmms/Playlist/Sync.html#method-c-new","(plist)",""],["not","Xmms::Collection","Xmms/Collection.html#method-i-not","()",""],["notifier","Xmms::Result","Xmms/Result.html#method-i-notifier","()","<p>Sets the block that’s executed when <em>res</em> is handled. Used by\nasyncronous results only.\n"],["on_disconnect","Xmms::Client","Xmms/Client.html#method-i-on_disconnect","()","<p>Sets the block that’s executed when <em>xc</em> is disconnected from the\nXMMS2 daemon.\n"],["operands","Xmms::Collection","Xmms/Collection.html#method-i-operands","()","<p>Gets a list of the operands that make up the collection.\n"],["or","Xmms::Collection","Xmms/Collection.html#method-i-or","(other)",""],["parse","Xmms::Collection","Xmms/Collection.html#method-c-parse","(p1)","<p>Returns a collection matching a String <em>pattern</em>. See the wiki for\ndetails on how to construct a pattern …\n"],["playback_current_id","Xmms::Client","Xmms/Client.html#method-i-playback_current_id","()","<p>Retrieves the media id of the currently played track.\n"],["playback_pause","Xmms::Client","Xmms/Client.html#method-i-playback_pause","()","<p>Pauses playback.\n"],["playback_playtime","Xmms::Client","Xmms/Client.html#method-i-playback_playtime","()","<p>Retrieves the playtime.\n"],["playback_seek_ms","Xmms::Client","Xmms/Client.html#method-i-playback_seek_ms","(p1)","<p>Seek to the song position given in <em>ms</em>.\n"],["playback_seek_ms_rel","Xmms::Client","Xmms/Client.html#method-i-playback_seek_ms_rel","(p1)","<p>Seek in the song by the offset given in ms.\n"],["playback_seek_samples","Xmms::Client","Xmms/Client.html#method-i-playback_seek_samples","(p1)","<p>Seek to the song position given in <em>samples</em>.\n"],["playback_seek_samples_rel","Xmms::Client","Xmms/Client.html#method-i-playback_seek_samples_rel","(p1)","<p>Seek in the song position by the offset given in samples.\n"],["playback_start","Xmms::Client","Xmms/Client.html#method-i-playback_start","()","<p>Starts playback.\n"],["playback_status","Xmms::Client","Xmms/Client.html#method-i-playback_status","()","<p>Retrieves the playback status.\n"],["playback_stop","Xmms::Client","Xmms/Client.html#method-i-playback_stop","()","<p>Stops playback.\n"],["playback_tickle","Xmms::Client","Xmms/Client.html#method-i-playback_tickle","()","<p>Advances to the next playlist entry.\n"],["playback_volume_get","Xmms::Client","Xmms/Client.html#method-i-playback_volume_get","()","<p>Gets the current playback volume.\n"],["playback_volume_set","Xmms::Client","Xmms/Client.html#method-i-playback_volume_set","(p1, p2)","<p>Sets playback volume for <em>channel</em> to <em>volume</em>.\n"],["playlist","Xmms::Client","Xmms/Client.html#method-i-playlist","(*args)","<p>Shortcut for Xmms::Playlist.new. Creates a new Xmms::Playlist object tied\nto the current Xmms::Client …\n"],["playlist_current_active","Xmms::Client","Xmms/Client.html#method-i-playlist_current_active","()","<p>Retrieves the name of the active playlist.\n"],["playlist_list","Xmms::Client","Xmms/Client.html#method-i-playlist_list","()","<p>Retrieves a list of all saved playlists from the medialib. Note that\nclients should treat internally …\n"],["playlist_set_next","Xmms::Client","Xmms/Client.html#method-i-playlist_set_next","(p1)","<p>Sets the next song to be played to <em>pos</em> (an absolute position).\n"],["playlist_set_next_rel","Xmms::Client","Xmms/Client.html#method-i-playlist_set_next_rel","(p1)","<p>Sets the next song to be played based on the current position where\n<em>pos</em> is a value relative to the current …\n"],["plugin_list","Xmms::Client","Xmms/Client.html#method-i-plugin_list","(*args)","<p>Retrieves an array containing a hash of information for each plugin.\n"],["push","Xmms::Collection::Operands","Xmms/Collection/Operands.html#method-i-push","(p1)",""],["quit","Xmms::Client","Xmms/Client.html#method-i-quit","()","<p>Shuts down the XMMS2 daemon.\n"],["radd","Xmms::Playlist","Xmms/Playlist.html#method-i-radd","(p1)","<p>Recursively imports all media files under <em>path</em> to the playlist.\n"],["remove","Xmms::Playlist","Xmms/Playlist.html#method-i-remove","()","<p>Removes the playlist from the medialib.\n"],["remove_entry","Xmms::Playlist","Xmms/Playlist.html#method-i-remove_entry","(p1)","<p>Removes the entry at <em>pos</em> from the playlist.\n"],["rinsert","Xmms::Playlist","Xmms/Playlist.html#method-i-rinsert","(p1, p2)","<p>Recursively imports all media files under <em>path</em> at position\n<em>pos</em> in the playlist.\n"],["shuffle","Xmms::Playlist","Xmms/Playlist.html#method-i-shuffle","()","<p>Shuffles the playlist.\n"],["signal_mediainfo_reader_unindexed","Xmms::Client","Xmms/Client.html#method-i-signal_mediainfo_reader_unindexed","()","<p>Requests the number of unindexed entries in the medialib.\n"],["signal_playback_playtime","Xmms::Client","Xmms/Client.html#method-i-signal_playback_playtime","()","<p>Retrieves the playtime as a signal.\n"],["size","Xmms::Dict","Xmms/Dict.html#method-i-size","()",""],["sort","Xmms::Playlist","Xmms/Playlist.html#method-i-sort","(p1)","<p>Sorts the playlist on <em>properties</em>, which is an array of medialib\nproperties such as [“title”, …\n"],["to_propdict","Xmms::RawDict","Xmms/RawDict.html#method-i-to_propdict","(*args)","<p>Transforms a RawDict (key-source-value) to a regular key-value dict. The\noptional src_prefs argument …\n"],["type","Xmms::Collection","Xmms/Collection.html#method-i-type","()","<p>Returns the type of the collection as an Integer.\n"],["union","Xmms::Collection","Xmms/Collection.html#method-i-union","(other)","<p>Returns a new collection that is the logical OR of <em>c</em> and\n<em>other</em>.\n"],["universe","Xmms::Collection","Xmms/Collection.html#method-c-universe","()","<p>Returns a collection referencing the “All Media” set.\n"],["userconfdir","Xmms","Xmms.html#method-c-userconfdir","()","<p>Returns the xmms2 configuration directory for the current user.\n"],["value","Xmms::Result","Xmms/Result.html#method-i-value","()",""],["wait","Xmms::Result","Xmms/Result.html#method-i-wait","()","<p>Waits for <em>res</em> to be handled.\n"],["xform_media_browse","Xmms::Client","Xmms/Client.html#method-i-xform_media_browse","(p1)","<p>returns a list of files from the server\n"],["|","Xmms::Collection","Xmms/Collection.html#method-i-7C","(other)",""],["~","Xmms::Collection","Xmms/Collection.html#method-i-7E","()",""]]}}